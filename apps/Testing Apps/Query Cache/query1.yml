id: query1
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: |-
        return [{
          "id": 1,
          time: "2023-02-18T10:30:00.000Z",
          "firstName": "Hanson",
          "lastName": "Deck",
          "email": "hanson@deck.com",
          "role": ['USER', 'CLIENT'],
          "data": [{
            id: 123,
            name: 'abc'
           }]
        }, {
          "id": 2,
          time: "2022-02-07T10:00:00.000Z",
          "firstName": "Sue",
          "lastName": "Shei",
          "email": "sueshei@example.com",
          "role": ['CLIENT'],
          "data": {
            id: 456,
            name: 'def'
          }
        }, {
          "id": 3,
          time: "2021-02-06T09:30:00.000Z",
          "firstName": "Jason",
          "lastName": "Response",
          "email": "jason@response.com",
          "role": ['USER'],
          "data": {
            id: 789,
            name: 'ghi'
          }
        }]
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: true
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: '[]'
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-03-08T11:50:50.596Z
