id: getFilteredAuditEvents
type: datasource
subtype: SqlQueryUnified
resourceName: 2b24fe5e-2a0b-4cb7-99cb-b4f311cc1c5a
resourceDisplayName: Local DB
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: |-
        with candidates as (
          select 
            ate.id
          from audit_trail_events ate 
          where
            -- time filter
            (ate."createdAt" between {{dateTime1.value}}
              and {{moment(dateTime1.value).add(numberInput1.value,  segmentedControl1.value).toISOString()}})
            -- user filter 
            and ({{!userFilter.value.length}}
              or ate."userId" = any({{userFilter.value}}))
            -- app filter
            and ({{!appFilter.value.length}} 
              or ate."pageName" = any({{appFilter.value}}))
            -- action filter
            and ({{!actionTypeFilter.value.length}} 
              or ate."actionType" = any({{actionTypeFilter.value}}))
            -- resource filter, null possible
            and ({{!resourceNameFilter.value.length}} 
              or ate."resourceName" = any({{resourceNameFilter.value}}) 
              or (ate."resourceName" = '') is not false)
        )
        select 
          users."firstName",
          users."lastName",
          users.email,
          ate.id,
          ate."actionType", 
          ate."pageName", 
          ate."queryName", 
          ate."createdAt",
          case 
            when resources."displayName" is null then ''
            when resource_folders."systemFolder" then resources."displayName"
            else concat(resource_folders.name, '/', resources."displayName")
          end as "resourceName",
          ate.metadata
        from candidates c
        left join audit_trail_events ate
          on c.id = ate.id
        left join users 
          on ate."userId" = users.id
        left join resources 
          on ate."resourceName" = resources.name
        left join resource_folders
          on resources."resourceFolderId" = resource_folders.id
        where 
          ({{!queryNameFilter.value.length}} 
            or ate."queryName" = any({{queryNameFilter.value}}) 
            or (ate."queryName" = '') is not false)
        order by ate."createdAt" asc
        limit {{table1.pageSize}}
        offset {{table1.paginationOffset}};
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: false
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - requestSentTimestamp: null
    - databaseHostOverride: ''
    - metadata: null
    - editorMode: sql
    - queryRunTime: null
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: ''
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events:
        - ordered:
            - event: success
            - type: datasource
            - method: trigger
            - pluginId: getFilteredAuditEventsCount
            - targetId: null
            - params:
                ordered: []
            - waitType: debounce
            - waitMs: '0'
    - tableName: ''
    - queryTimeout: '120000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-12-21T19:10:13.274Z
