id: getApps
type: datasource
subtype: SqlQueryUnified
resourceName: 2b24fe5e-2a0b-4cb7-99cb-b4f311cc1c5a
resourceDisplayName: Local DB
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: |-
        with page_views as (
          select
            "pageName" as page_name,
            count(*) as count_page_views,
            count(distinct "userId") as count_unique_viewers
          from
            audit_trail_events
          where
            "createdAt" <= {{ currentTimeRange.value.end }}
            and "createdAt" > {{ currentTimeRange.value.start }}
            and "organizationId"=ANY({{organizationIds.data}})  
            and "actionType"='PAGE_VIEW'
          group by
            1
        ),
        page_saves as (
          select
            "pageId" as page_id,
            count(*) as count_page_saves,
            count(distinct "userId") as count_unique_builders
          from
            page_saves
          where
            "createdAt" <= {{ currentTimeRange.value.end }}
            and "createdAt" > {{ currentTimeRange.value.start }}
          group by
            1
        ),
        pages as (
          select
            pages.name,
            pages.id,
            uuid,
            pages."createdAt" as created_at,
            "folderId" as folder_id,
            "isGlobalWidget" as is_module,
            "protected" as protected,
            folders.name as folder_name,
            users.email as last_edited_by
          from
            pages
            left join folders on folders.id = pages."folderId"
            left join users on users.id = pages."lastEditedBy"
          where
            pages.name ilike {{ '%' + ApplicationSearchInput.value + '%' }} 
            and  folders.name <> 'archive'
            and "isGlobalWidget" = FALSE
        )
        select
          pages.*,
          page_saves.count_page_saves,
          page_saves.count_unique_builders,
          page_views.count_page_views,
          page_views.count_unique_viewers
        from
          pages
          left join page_saves on page_saves.page_id = pages.id
          left join page_views on page_views.page_name = pages.name
        order by
          count_page_views desc nulls last
        limit
          {{ MaxApps.value}};
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - requestSentTimestamp: null
    - databaseHostOverride: ''
    - metadata: null
    - editorMode: sql
    - queryRunTime: null
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: ''
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: ''
    - events: []
    - tableName: ''
    - queryTimeout: '120000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-03-06T23:08:07.757Z
folder: pages
