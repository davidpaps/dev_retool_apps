id: getUsersOverTime
type: datasource
subtype: SqlQueryUnified
resourceName: 2b24fe5e-2a0b-4cb7-99cb-b4f311cc1c5a
resourceDisplayName: Local DB
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: >+
        WITH 

        -- auxiliary table with one row per each day in our range

        dates AS (
          SELECT d::date AS day
          FROM generate_series(
            to_date({{DateRange.value.start}}, 'YYYY-MM-DD'),
            to_date({{DateRange.value.end}}, 'YYYY-MM-DD'),
            '1 day'
          ) AS gs(d)
        ), 

        -- get unique tuples "user id - date", one tuple per each user that
        viewed a page on a given date

        -- we need to look at events that happened up to 30 days before our
        range start, because they'll affect trailing 30d MAU

        unique_users_by_date AS (
          SELECT DISTINCT "userId", date_trunc('day', "createdAt")::date AS day
          FROM audit_trail_events 
          WHERE 
            "actionType" = ANY({{userActions.value}})
            AND "createdAt" >= (to_date({{ DateRange.value.start }}, 'YYYY-MM-DD') - INTERVAL '30 DAYS') AND "createdAt" < {{ DateRange.value.end }}
            AND "organizationId" = ANY({{organizationIds.data}}) -- need this to hit (organizationId, createdAt) index
        ),

        -- now we generate one row per each "user id - date" combination where
        user had been active in 30 days ending on that date

        active_users_30d AS (
          SELECT DISTINCT "userId", dates.day AS day
          FROM dates JOIN unique_users_by_date
          ON dates.day >= unique_users_by_date.day AND dates.day < unique_users_by_date.day + 30
        ),

        -- all we're left to do is to count distinct "30d active" users for each
        date in our range

        trailing_30d_maus AS (
          SELECT dates.day, COUNT(DISTINCT "userId") AS MAU
          FROM dates LEFT JOIN active_users_30d
          ON dates.day = active_users_30d.day
          WHERE dates.day >= {{DateRange.value.start}} AND dates.day <= {{DateRange.value.end}}
          GROUP BY dates.day
        )

        SELECT * FROM trailing_30d_maus

    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - requestSentTimestamp: null
    - databaseHostOverride: ''
    - metadata: null
    - editorMode: sql
    - queryRunTime: null
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: ''
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - tableName: ''
    - queryTimeout: '120000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-03-07T20:13:33.413Z
folder: overview
